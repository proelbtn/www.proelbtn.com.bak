{
  
    
        "post0": {
            "title": "NATタイプとその判定法について",
            "content": "少しNATに関する事を調べる機会があったのでメモ。 . 用語 . internal IP address: NATされる前のIPアドレス | internal port: NATされる前のポート番号 | external IP address: NATされた後のIPアドレス | external port: NATされた後のポート番号 | . NATの種類 . NATにはexternal IP address, portの決定方法や、そのエンドポイントと通信が出来るホストの範囲によって4種類に大分することが出来る。 . Full Cone . Full Coneでは、external IP address, portがinternal IP address, portによって決定する。このようなアドレス・ポート番号選択の挙動をEIM（Endpoint Independent Mapping）1と呼ぶ。また、一度このポートのマッピングが決定されると、外部ネットワークのどのホストからでもそのエンドポイントを介して通信を行うことが出来る。このようなフィルタリングの挙動をEIF（Endpoint Independent Filtering）1という。 . MNOやMVNOなどのモバイルキャリアで持ちられるCGN（Carrier Grade NAT）では、Full ConeにすることでCGN透過性が上がりP2Pでの接続が行いやすくなる事が知られている2。 . Restricted Cone . Restricted ConeはFull Coneと同様にEIMによってアドレスやポート番号が選択される。だが、セキュリティ上の制約から、一度そのエンドポイントを介して通信が行われたIPアドレスからのみ、内部の端末と通信が行えるようなフィルタリングがなされている。このようなフィルタリングの挙動をEDF（Endpoint Dependent Filtering）1, 特にAddress-Dependent Filteringという。 . Port Restricted Cone . Port Restricted ConeはRestricted Coneよりも更に制約を厳しくしたものである。一度そのエンドポイントを介して通信が行われたエンドポイントからのみ、内部の端末と通信が行えるようなフィルタリングがなされている。このようなフィルタリングの挙動はAddress and Port-Dependent Filteringと呼ばれる。 . Symmetric . Symmetricでは、external IP address, portを決定する際に、internal IP address, port, 通信先のIP address, portを利用して決定する。このアドレス・ポート番号選択の仕組みは通信先のエンドポイントに依存しているため、EDM（Endpoint Dependent Mapping）1と呼ばれる。 . NATタイプの判定法 . NATタイプの判定法に関してはRFC3489に示されている3。 . 追記 . EIM, EIFはプロトコルに依存しない形にも依存する形にも出来る。依存する場合、TCP SYNで(int IP, int port)と(ext IP, ext port)のマッピングが作成された時、同一のIPとportから送られてきたUDPのパケットはそのマッピングを利用してNATされ、そのマッピングに対応するフィルタリングが利用される（デフォルトの挙動）4。 . https://tools.ietf.org/rfc/rfc5128.txt &#8617; &#8617;2 &#8617;3 &#8617;4 . | https://www.soumu.go.jp/main_content/000352303.pdf &#8617; . | https://tools.ietf.org/html/rfc3489 &#8617; . | https://tools.ietf.org/html/rfc7857#section-5 &#8617; . |",
            "url": "https://www.proelbtn.com/2020/04/12/nat.html",
            "relUrl": "/2020/04/12/nat.html",
            "date": " • Apr 12, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "WireGuardを利用した時のMTUについて",
            "content": "2019年に登場した次世代のVPNとしてWireGuardというVPNがある。L3VPNしか張れないという制約はあるものの、Linuxの実装は4000行以下で済むほどシンプルなVPNである。そのシンプルさとは裏腹に、OpenVPNやIPsecと比べて高いスループットを実現している（Whitepaper）。 . WireGuard自体のセットアップは非常に簡単だが、MTUの計算周りで少し躓いた。あまりこの部分にたいしても言及されていないため、メモとして残しておく。 . encapsされた後のパケット構造 . WireGuardはUDP上で動くVPNである。そのため、あるパケットがencapsされると次のようなパケットの構造になる。 . . 元々のMTUが1500bytesだとすると、IPヘッダとUDPヘッダはそれぞれ20bytes, 8bytesなのでWireGuardのパケットに割ける領域は1472bytesになる。では、実際にWireGuardによって生成されるパケットの構造を見てみる。 . WireGuardのパケット構造 . WireGuardでは、以下の4種類のパケットが生成されうる。可変長なパケットは一番下のtype4だけなのでそれについて詳しく見ていく。 . . type4の最後にあるpacketの部分が実際に暗号化されたL3パケットが入る。パケットの暗号化の流れは次のように行われる。初めに、暗号化したいパケットが16bytesの倍数になるように末尾に0をパディングする。その後、AEAD（認証付き暗号）で暗号化する。WireGuardでは、AEADの方式としてChaCha20Poly1305を利用しており、16bytesの認証用のタグが末尾につく。 . . ここまで分かれば適切なWireGuardのMTUが計算できる。前の節の例では、WireGuardのパケットに1472bytes割けることが分かっている。ここからtype, reserved, receiver, couterの分で16bytes削られ、AEADで暗号化された暗号文に1456bytes割ける。暗号文には16bytesのタグが付いているので実際の暗号文には1440bytes使える。1440bytesは16bytesの倍数なので、WireGuardデバイスのパケットサイズとして1440bytesを指定すればパケットが問題なく転送される。 . ここまでの計算をまとめると、WireGuardデバイスに指定すべきMTUを$y$, 元々のMTUを$x$とすると次のような関係が成り立つ。$ mathrm{floor}$は床関数（引数に与えられた小数以下の中で最も大きい整数）である。 . [ y = 16 cdot mathrm{floor} left( frac{x - 60}{16} right) ] . 実際の環境 . 僕の家はソフトバンク光を契約しており、IPv4の疎通性を提供するためにIPv4 over IPv6をしている。そのため、インターネットに出ていくIPv4のMTUは1500 - 40（IPv6ヘッダのパケット長）で1460bytesである。先程の関係式の$x$に1460を代入して計算を行うと、実際にWireGuardデバイスに対して指定すべきMTUが1392bytesだと計算が出来る。 . まとめ . WireGuardを利用してL3VPNを張る時のMTUの計算式やその計算式の根拠を示した。 .",
            "url": "https://www.proelbtn.com/2020/04/11/wireguard-mtu.html",
            "relUrl": "/2020/04/11/wireguard-mtu.html",
            "date": " • Apr 11, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "えるとです。ちょっとLinuxとネットワークに興味がある学生です。 . GPG: 9059628DF2BDC408FC71679798B064149B379656 | .",
          "url": "https://www.proelbtn.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}